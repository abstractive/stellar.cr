#!/bin/bash

function timestamp { echo `date '+%Y-%m-%d %H:%M:%S.%3N'`; }
function log { echo "$(timestamp) > $1"; }


#de Visit: Realtime development environment; the constellation is locally live.
#de Build: Quasar and Artillery builds together, rendered as build/ and executable.
#de Deploy: Package executable and interface application build into container and push.
#de Monitor: Console tap for Artillery microservices and access to visualize mesh activity.

export ARTILLERY_CONFIGURATION='stellar.yml'

case "${@: -1}" in

  console )
    tail -f logs/console.log
    ;;

  errors )
    tail -f logs/errors.log
    ;;

  status )
    #de Need to distinguish between processes running, if multiple presences per environment.
    #de Containerization will remove the need for this, if presences are isolated
    #de but that will not likely be the primary scenario going forward.
    log "Running stellar processes:"
    ps aux | grep stellar
    ps aux | grep presence
    ;;

  start )
    #de Need to check for 
    log "Starting both Mountpoint and Launcher for Artillery //"
    bin/stellar mountpoint
    bin/stellar launcher
    ;;
  
  mountpoint )
    if [[ ! -f lib/artillery/bin/artillery-mountpoint ]]; then
      log "Building presence mountpoint."
      cd lib/artillery/
      shards build artillery-mountpoint
      cd ../../
    fi
    log "Starting Artillery::Mountpoint with output to logs/"
    lib/artillery/bin/artillery-mountpoint 2>> logs/errors.log 1>> logs/console.log &
    log "Artillery::Mountpoint running //"
    ;;
  launcher )
    if [[ ! -f bin/presence ]]; then
      log "Building presence launcher."
      shards build presence
    fi
    log "Starting Artillery::Launcher with output to logs/"
    bin/presence 2>> logs/errors.log 1>> logs/console.log &
    log "Artillery::Launcher running. Now opening console //"
    bin/stellar console
    ;;
  init )
    #de Clone face/ into current presence and build initial interface.
    if [[ ! -d face ]]; then
      cp -R lib/stellar/face .
      cd face/
      npm install
    else
      log "Interface already exists."
    fi
    if [[ ! -d stars ]]; then
      cp -R lib/stellar/stars .
      cd stars/
    else
      log "Stars already exist."
    fi
    ;;

  start | * )
    log "Instantiating Stellar presence/constellation."
    export ARTILLERY_SHOTS_DIRECTORY="stars"

    export ARTILLERY_BASE="\"stellar\""
    if [[ -d "$(pwd)/src" ]]; then
        export ARTILLERY_BASE="\"./src/stellar.cr\""
    fi

    bin/artillery --bazooka $*
    ;;

esac